# Install MongoDb locally
    $ brew install mongodb-community
    $ brew services start mongodb-community
    $ brew services stop mongodb-community

# NPM and packages
    $ npm init // initializing npm
    Packages:
        express => express framwork
        express-validator => for data validation
        bcryptjs => for encrypting passwords
        config => for global varables
        gravatar => for profile avatars
        jsonwebtoken => to pass token for validation
        mongoose => mongodb layer
        request => to make http requests to other APIs
    
    $ npm i express express-validator bcryptjs config gravatar jsonwebtoken mongoose request

    Dev Packages:
        nodemon => constantly watch server so that we don't have to refrest everytime
        concurrently => run backend express and frontend react server at the same time
    
    $ npm i -D nodemon concurrently

=> To run server, change package.json scripts property
    $ npm run server

# Create react server in folder named client
    $ npx create-react-app client
    $ cd client
    $ npm start

# Use concurrently to run both server and client side by side. For this, edit package.json

# Add dependencies required for client side
    $ cd client
    Packages:
        axios => To make http requests
        react-router-dom => for router
        redux
        react-redux
        redux-thunk => middleware to allow to make async requests in actions
        redux-devtools-extention
        moment => Date and time library to format date and time
        react-moment => For using moment within a component
        uuid => Generate random id
    $ npm i axios react-router-dom redux react-redux redux-thunk redux-devtools-extension moment react-moment uuid

# Remove git repo initialization from client size
    $ rm -rf .git
    $ rm -r README.md and .gitignore

# Set proxy inside package.json for client to avoid writing it again and again for every route
# Remove files serviceWorker.js, logo.svg, index.css and App.test.js from client src folder. 